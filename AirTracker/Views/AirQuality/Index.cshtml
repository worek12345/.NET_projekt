@model AirTracker.Models.ViewModels.AirQualitySelectionViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Text.Json
@using System.Linq

@{
    ViewData["Title"] = "Jakość powietrza";

    var cityList = new SelectList(Model.Cities, Model.SelectedCity);
    var combinedLocations = Model.Locations
        .Union(Model.AllLocations.Where(l => l.Id == Model.SelectedLocationId))
        .ToList();
    var locationList = new SelectList(combinedLocations, "Id", "Name", Model.SelectedLocationId);

    var sensorList = new SelectList(Model.Sensors, "Id", "Name", Model.SelectedSensorId);

    var labelsJson = JsonSerializer.Serialize(Model.Data.Select(m => m.RetrievedAt.ToString("dd.MM.yyyy HH:mm")));
    var valuesJson = JsonSerializer.Serialize(Model.Data.Select(m => m.Value));
}

<div class="container mt-4">
    <h1 class="mb-4">Jakość powietrza</h1>

    <h3 class="mb-3">Wybierz region z mapy:</h3>

    <div id="map" style="height: 500px;" class="mb-4"></div>

    <select id="regionSelect" class="d-none">
        @foreach (var loc in Model.AllLocations)
        {
            var lat = loc.Latitude.ToString().Replace(',', '.');
            var lng = loc.Longitude.ToString().Replace(',', '.');
            <option value="@loc.Id" data-lat="@lat" data-lng="@lng" data-city="@loc.City">@loc.Name</option>
        }
    </select>

    <form asp-action="Index" method="get" class="row g-3 mb-5" id="mainForm">
        <div class="col-md-4">
            <label asp-for="SelectedCity" class="form-label">Miasto</label>
            <select asp-for="SelectedCity" asp-items="cityList" class="form-select" onchange="this.form.submit()">
                <option value="">-- wybierz --</option>
            </select>
        </div>

        <div class="col-md-4">
            <label asp-for="SelectedLocationId" class="form-label">Lokalizacja</label>
            <select asp-for="SelectedLocationId" asp-items="locationList" class="form-select" onchange="this.form.submit()">
                <option value="">-- wybierz --</option>
            </select>
        </div>

        <div class="col-md-4">
            <label asp-for="SelectedSensorId" class="form-label">Sensor</label>
            <select asp-for="SelectedSensorId" asp-items="sensorList" class="form-select" onchange="this.form.submit()" disabled="@( !Model.SelectedLocationId.HasValue )">
                <option value="">-- wybierz --</option>
            </select>
        </div>
    </form>

    @if (Model.SelectedSensorId.HasValue && Model.Data.Any())
    {
        <div class="d-flex gap-2 mb-4">
            <form method="get" asp-controller="AirQuality" asp-action="ExportCsv">
                <input type="hidden" name="sensorId" value="@Model.SelectedSensorId" />
                <input type="hidden" name="locationId" value="@Model.SelectedLocationId" />
                <button type="submit" class="btn btn-outline-success">Eksportuj do CSV</button>
            </form>

            <form method="get" asp-controller="AirQuality" asp-action="CompareStart">
                <input type="hidden" name="sensorId" value="@Model.SelectedSensorId" />
                <input type="hidden" name="locationId1" value="@Model.SelectedLocationId" />
                <button type="submit" class="btn btn-outline-primary">Porównaj z innym regionem</button>
            </form>
        </div>

        <h2 class="mb-4">Dane sensora #@Model.SelectedSensorId</h2>

        <div class="table-responsive mb-3">
            <table class="table table-striped" id="dataTable">
                <thead>
                    <tr>
                        <th>Data pomiaru</th>
                        <th>Parametr</th>
                        <th>Wartość (@Model.Data.First().Units)</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Data.Count; i++)
                    {
                        var m = Model.Data[i];
                        var hidden = i >= 10 ? "d-none extra-row" : "";
                        <tr class="@hidden">
                            <td>@m.RetrievedAt.ToString("dd.MM.yyyy HH:mm")</td>
                            <td>@m.Parameter</td>
                            <td>@m.Value.ToString("F2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <button id="toggleTableBtn" class="btn btn-sm btn-outline-secondary mb-4">Pokaż więcej</button>

        <h4>Wykres pomiarów (ostatnie 24 h)</h4>
        <canvas id="aqChart" height="100"></canvas>

        <h4 class="mt-5">Prognoza pomiarów (najbliższe 24 h)</h4>
        <canvas id="forecastChart" height="100"></canvas>

    }
    else if (Model.SelectedSensorId.HasValue)
    {
        <div class="alert alert-warning">Brak danych pomiarowych dla wybranego sensora.</div>
    }
    else
    {
        <div class="alert alert-info">Wybierz sensor, aby zobaczyć tabelę i wykres.</div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const regionSelect = document.getElementById("regionSelect");
            const locationSelect = document.querySelector("select[name='SelectedLocationId']");
            const citySelect = document.querySelector("select[name='SelectedCity']");
            const mapDiv = document.getElementById("map");
            const form = document.getElementById("mainForm");

            if (!regionSelect || !mapDiv || !locationSelect || !form) return;
            if (mapDiv._leaflet_id != null) return;

            const map = L.map("map").setView([52.2, 21.0], 6);
            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            const selectedId = locationSelect?.value;
            const options = regionSelect.querySelectorAll("option");

            options.forEach(option => {
                const lat = parseFloat(option.dataset.lat);
                const lng = parseFloat(option.dataset.lng);
                const name = option.textContent;
                const id = option.value;
                const city = option.dataset.city;

                if (isNaN(lat) || isNaN(lng)) return;

                const isSelected = id === selectedId;

                const marker = isSelected
                    ? L.marker([lat, lng], { icon: redIcon() })
                    : L.marker([lat, lng]);

                marker.addTo(map);
                marker.bindPopup(name);

                marker.on("click", () => {
                    if (citySelect && locationSelect) {
                        citySelect.value = city;
                        locationSelect.value = id;

                        citySelect.disabled = false;
                        locationSelect.disabled = false;

                        setTimeout(() => {
                            form.submit();
                        }, 50);
                    }
                });
            });

            function redIcon() {
                return L.icon({
                    iconUrl: "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
                    shadowUrl: "https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png",
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });
            }
        });

        const labels = @Html.Raw(labelsJson);
        const data = @Html.Raw(valuesJson);
        const ctx = document.getElementById('aqChart')?.getContext('2d');

        if (ctx) {
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Wartość pomiaru',
                        data: data,
                        fill: false,
                        tension: 0.3,
                        pointRadius: 3,
                        borderWidth: 2
                    }]
                },
                options: {
                    scales: {
                        x: { title: { display: true, text: 'Data pomiaru' } },
                        y: { title: { display: true, text: 'Wartość' } }
                    },
                    plugins: { legend: { display: false } }
                }
            });
        }

        const forecastBase = data.map((v, i) => ({ hour: i, value: parseFloat(v) }));
        const recentData = data.slice(-12).map(Number);
        const slope = (recentData[recentData.length - 1] - recentData[0]) / recentData.length;

        const forecast = [];
        for (let i = 0; i < 24; i++) {
            const base = recentData[i % recentData.length];
            const trend = slope * i * 0.5;
            forecast.push(base + trend);
        }

        const forecastLabels = [];
        const now = new Date();
        for (let i = 1; i <= 24; i++) {
            const dt = new Date(now.getTime() + i * 60 * 60 * 1000);
            forecastLabels.push(dt.toLocaleString('pl-PL', {
                hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit'
            }));
        }

        const forecastData = forecast.map(v => v.toFixed(2));
        const forecastCtx = document.getElementById('forecastChart')?.getContext('2d');
        if (forecastCtx) {
            new Chart(forecastCtx, {
                type: 'line',
                data: {
                    labels: forecastLabels,
                    datasets: [{
                        label: 'Prognozowana wartość',
                        data: forecastData,
                        fill: false,
                        tension: 0.3,
                        pointRadius: 3,
                        borderWidth: 2,
                        borderColor: 'rgba(255, 165, 0, 1)',
                        backgroundColor: 'rgba(255, 165, 0, 0.1)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: true, position: 'top' }
                    },
                    scales: {
                        x: {
                            title: { display: true, text: 'Czas (następne 24h)' }
                        },
                        y: {
                            title: { display: true, text: 'Prognozowana wartość' },
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        document.getElementById("toggleTableBtn")?.addEventListener("click", function () {
            const rows = document.querySelectorAll("#dataTable .extra-row");
            const isHidden = rows[0]?.classList.contains("d-none");
            rows.forEach(row => row.classList.toggle("d-none"));
            this.textContent = isHidden ? "Pokaż mniej" : "Pokaż więcej";
        });
    </script>
}
